(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{416:function(e,t,r){"use strict";r.r(t);var n=r(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),r("div",{staticClass:"danger custom-block"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),r("p",[r("a",{attrs:{href:"https://github.com/weexteam/android-devtools-for-Apache-Weex",target:"_blank",rel:"noopener noreferrer"}},[e._v("Android Devtools for Apache Weex"),r("OutboundLink")],1),e._v(" 是三方插件, 不由 Apache Weex 开发或维护。")])]),r("p",[e._v("Android Devtools for Apache Weex 能够方便调试 Weex 页面，但此功能离不开 Native端 的支持。本章将会详细说明 Android 端如何接入 Android Devtools for Apache Weex.")]),e._m(1),e._m(2),e._m(3),e._m(4),r("p",[e._v("可以通过Gradle 或者 Maven添加对 Android Devtools for Apache Weex 的依赖, 也可以直接对源码依赖.")]),e._m(5),e._m(6),r("p",[e._v("或者")]),e._m(7),e._m(8),r("p",[e._v("或者")]),e._m(9),r("p",[e._v("需要复制"),r("a",{attrs:{href:"https://github.com/weexteam/weex_devtools_android/tree/master/inspector",target:"_blank",rel:"noopener noreferrer"}},[e._v("inspector"),r("OutboundLink")],1),e._v("目录到你的app的同级目录, 然后在工程的 "),r("code",[e._v("settings.gradle")]),e._v(" 文件下添加 "),r("code",[e._v('include ":inspector"')]),e._v(", 此过程可以参考playground源码的工程配置及其配置, 然后在app的"),r("code",[e._v("build.gralde")]),e._v("中添加依赖.")]),e._m(10),e._m(11),e._m(12),e._m(13),r("p",[e._v("最简单方式就是复用Playground的相关代码,比如扫码和刷新等模块, 但是扫码不是必须的, 它只是与app通信的一种形式, 二维码里的包含DebugServer IP及bundle地址等信息,用于建立App和Debug Server之间的连接及动态加载bundle. 在Playground中给出了两种开启debug模式的范例.")]),e._m(14),e._m(15),e._m(16),e._m(17),r("p",[e._v("拦截方式：")]),e._m(18),e._m(19),e._m(20),e._m(21),e._m(22),e._m(23),r("p",[e._v("Devtools扩展了"),r("a",{attrs:{href:"https://developer.chrome.com/devtools/docs/debugger-protocol",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chrome Debugging Protocol"),r("OutboundLink")],1),e._v(", 在客户端和调试服务器之间的采用"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/JSON-RPC",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON-RPC"),r("OutboundLink")],1),e._v("作为通信机制, 本质上调试过程是两个进程间协同, 相互交换控制权及运行结果的过程. 更多细节还请阅读"),r("a",{attrs:{href:"http://www.atatech.org/articles/59284",target:"_blank",rel:"noopener noreferrer"}},[e._v("Weex Devtools Debugger的技术选型实录"),r("OutboundLink")],1),e._v("这篇文章.")]),e._m(24),e._m(25)])}),[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"概要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[this._v("#")]),this._v(" 概要")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"版本兼容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本兼容"}},[this._v("#")]),this._v(" 版本兼容")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("table",[r("thead",[r("tr",[r("th",[e._v("WeexSDK")]),r("th",[e._v("Weex Inspector")])])]),r("tbody",[r("tr",[r("td",[e._v("0.16.0+")]),r("td",[e._v("0.12.1")])]),r("tr",[r("td",[e._v("0.17.0+")]),r("td",[e._v("0.13.2")])]),r("tr",[r("td",[e._v("0.18.0+")]),r("td",[e._v("0.13.4-multicontext")])]),r("tr",[r("td",[e._v("0.19.0+")]),r("td",[e._v("0.18.68")])]),r("tr",[r("td",[e._v("0.20.3.0-beta")]),r("td",[e._v("0.20.3.0-beta")])]),r("tr",[r("td",[e._v("0.24.0+")]),r("td",[e._v("0.24.2.4")])]),r("tr",[r("td",[e._v("0.26.0+")]),r("td",[e._v("0.24.2.4")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"android接入指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#android接入指南"}},[this._v("#")]),this._v(" Android接入指南")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"一、添加依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、添加依赖"}},[this._v("#")]),this._v(" 一、添加依赖")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("em",[this._v("Gradle依赖")]),this._v(".")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("dependencies {\n   implementation 'com.taobao.android:weex_inspector:0.24.2.11'\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("em",[this._v("Maven依赖")]),this._v(".")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<dependency>\n  <groupId>com.taobao.android</groupId>\n  <artifactId>weex_inspector</artifactId>\n  <version>0.24.2.11</version>\n  <type>pom</type>\n</dependency>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("em",[this._v("源码依赖")]),this._v(".")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("dependencies {\n   compile project(':inspector')\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("需要引入okhttp")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v(" dependencies {\n    compile 'com.squareup.okhttp:okhttp:2.3.0'\n    compile 'com.squareup.okhttp:okhttp-ws:2.3.0'\n     ...\n }\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"二、调试开关（扫码开启调试-手动开启调试）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、调试开关（扫码开启调试-手动开启调试）"}},[this._v("#")]),this._v(" 二、调试开关（扫码开启调试/手动开启调试）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("范例1: 通过在XXXApplication中设置开关打开调试模式 "),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('public class MyApplication extends Application {\n  public void onCreate() {\n  super.onCreate();\n  initDebugEnvironment(true, "xxx.xxx.xxx.xxx"/*"DEBUG_SERVER_HOST"*/);\n  //WXSDKEngine.reload();\n  }\n}\n\nprivate void initDebugEnvironment(boolean enable, String host) {\n  WXEnvironment.sRemoteDebugMode = enable;\n  WXEnvironment.sRemoteDebugProxyUrl = "ws://" + host + ":8088/debugProxy/native";\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这种方式最直接, 在代码中直接hardcode了开启调试模式, 如果在SDK初始化之前调用甚至连"),t("code",[this._v("WXSDKEngine.reload()")]),this._v("都不需要调用, 接入方如果需要更灵活的策略可以将"),t("code",[this._v("initDebugEnvironment(boolean enable, String host)")]),this._v("和"),t("code",[this._v("WXSDKEngine.reload()")]),this._v("组合在一起在合适的位置和时机调用即可.（如果不是初始化之前调用，n那么每次调用initDebugEnvironment后必须调用WXSDKEngine.reload()刷新Weex引擎）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("范例2:通过扫码打开调试模式 "),t("br"),this._v("\nPlayground中较多的使用扫描weex debugger生成的调试二维码的方式传递信息, 不仅用这种方式控制Debug模式的开关,而且还通过它来传入bundle的url直接调试. 应当说在开发中这种方式是比较高效的, 省去了修改sdk代码重复编译和安装App的麻烦.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('if (WXEnvironment.isApkDebugable()) {\n  String devToolUrl = uri.getQueryParameter("_wx_devtool");\n  if (!TextUtils.isEmpty(devToolUrl)) {\n    WXEnvironment.sRemoteDebugProxyUrl = devToolUrl;\n    WXEnvironment.sDebugServerConnectable = true;\n    WXSDKEngine.reload(XXXXX.getApplication(), false);\n  }\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("可选：调试刷新协议 "),t("br"),this._v("\n广播 ACTION_DEBUG_INSTANCE_REFRESH 在调试模式切换和 Chrome 调试页面刷新时发出，主要用来通知当前的 Weex容器以 Debug 模式重新加载当前页。在 playground 中的处理过程如下：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("  public class RefreshBroadcastReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n      if (IWXDebugProxy.ACTION_DEBUG_INSTANCE_REFRESH.equals(intent.getAction())) {\n        //Do something\n      }\n    }\n  }\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"科普"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#科普"}},[this._v("#")]),this._v(" 科普")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("TIP")]),t("p",[this._v("在以下的简介中，Android Devtools for Apache Weex 将简称为 Devtools")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"devtools组件介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#devtools组件介绍"}},[this._v("#")]),this._v(" Devtools组件介绍")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[t("strong",[this._v("客户端")]),this._v("\nDevtools 客户端作为aar被集成App中, 它通过webscoket连接到调试服务器,此处并未做安全检查. 出于安全机制及包大小考虑, 强烈建议接入方只在debug版本中打包此aar.")])]),t("li",[t("p",[t("strong",[this._v("服务器")]),this._v("\nDevtools 服务器端是信息交换的中枢, 既连接客户端, 又连接Chrome, 大多数情况下扮演一个消息转发服务器和Runtime Manager的角色.")])]),t("li",[t("p",[t("strong",[this._v("Web端")]),this._v("\nChrome的V8引擎扮演着bundle javascript runtime的角色. 开启debug模式后, 所有的bundle js 代码都在该引擎上运行. 另一方面我们也复用了Chrome前端的调试界面, 例如设置断点,  查看调用栈等, 调试页关闭则runtime将会被清理.")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("调试的大致过程请参考如下时序图.\n"),t("img",{attrs:{src:"https://img.alicdn.com/tps/TB1igLoMVXXXXawapXXXXXXXXXX-786-1610.jpg",alt:"debug sequence diagram",title:"debug sequence diagram"}})])}],!1,null,null,null);t.default=s.exports}}]);